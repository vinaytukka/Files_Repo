{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP2hosaCTm+OkrH2qSVJlbC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vinaytukka/Files_Repo/blob/main/GPT_3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xp5nvMhxnqvw",
        "outputId": "344e1eb4-ea96-4cac-feae-3ee53a23b345"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-08-15 06:46:29--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 1115394 (1.1M) [text/plain]\n",
            "Saving to: ‘input.txt.1’\n",
            "\n",
            "\rinput.txt.1           0%[                    ]       0  --.-KB/s               \rinput.txt.1         100%[===================>]   1.06M  --.-KB/s    in 0.05s   \n",
            "\n",
            "2023-08-15 06:46:29 (20.2 MB/s) - ‘input.txt.1’ saved [1115394/1115394]\n",
            "\n",
            "step 0: train loss 4.2849, val loss 4.2823\n",
            "step 500: train loss 2.0099, val loss 2.0961\n",
            "step 1000: train loss 1.6017, val loss 1.7816\n",
            "step 1500: train loss 1.4414, val loss 1.6390\n",
            "step 2000: train loss 1.3430, val loss 1.5733\n",
            "step 2500: train loss 1.2798, val loss 1.5327\n",
            "step 3000: train loss 1.2281, val loss 1.5107\n",
            "step 3500: train loss 1.1833, val loss 1.4902\n",
            "step 4000: train loss 1.1475, val loss 1.4842\n",
            "step 4500: train loss 1.1112, val loss 1.4822\n",
            "\n",
            "But with princh: I will steal win him.\n",
            "Let's well me as she is of Romeo is his.\n",
            "\n",
            "RICHARD:\n",
            "Be self more and to Harry, no:\n",
            "Ah, heard that a Romeo scurfolk slavish word:\n",
            "And that himself thought to record a clowledge.\n",
            "Will it pack of the truth vex your oath,\n",
            "And enforces these advice these my scourts\n",
            "Within blashock down steps of your loyars.\n",
            "\n",
            "KING HENRY VI:\n",
            "Well, what me? That lack-trived belove them?\n",
            "O God, well'd had! may not with this consul I,\n",
            "I cannot be some night. Ay, farewell.\n",
            "\n",
            "HENRY BOLIN\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.nn import functional as F\n",
        "\n",
        "# hyperparameters\n",
        "\n",
        "batch_size = 64 #how many independent sequences will we process in parallell?\n",
        "block_size = 256 #what is the maximum context length for predictions?\n",
        "max_iters = 5000\n",
        "eval_interval = 500\n",
        "learning_rate = 3e-4\n",
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "eval_iters = 200\n",
        "n_embd = 384 # number of embedding dimensions\n",
        "n_head = 6\n",
        "n_layer = 6\n",
        "dropout = 0.2\n",
        "# ---------------\n",
        "\n",
        "torch.manual_seed(1337)\n",
        "\n",
        "!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\n",
        "\n",
        "with open('input.txt','r',encoding='utf-8') as f:\n",
        "  text = f.read()\n",
        "\n",
        "# here all the characters that occur in this text\n",
        "chars = sorted(list(set(text)))\n",
        "vocab_size = len(chars)\n",
        "\n",
        "# create a mapping from characters to integers\n",
        "\n",
        "stoi = {ch:i for i, ch in enumerate(chars)}\n",
        "itos = {i:ch for i, ch in enumerate(chars)}\n",
        "\n",
        "encode = lambda s: [stoi[c] for c in s] #encoder: take a string, output a list of integers\n",
        "decode = lambda l: ''.join([itos[i] for i in l]) #decoders: take a list of integers, output a string\n",
        "\n",
        "\n",
        "\n",
        "# Train and Test split\n",
        "data = torch.tensor(encode(text), dtype=torch.long)\n",
        "n = int(0.9*len(data))\n",
        "train_data = data[:n]\n",
        "val_data = data[n:]\n",
        "\n",
        "# data loading\n",
        "\n",
        "def get_batch(split):\n",
        "  # generate a small batch of data of inputs x and targets y\n",
        "  data = train_data if split == 'train' else val_data\n",
        "  ix = torch.randint(len(data)-block_size, (batch_size,))\n",
        "  x = torch.stack([data[i:i+block_size] for i in ix])\n",
        "  y = torch.stack([data[i+1:i+block_size+1]for i in ix])\n",
        "  x, y = x.to(device), y.to(device)\n",
        "\n",
        "  return x, y\n",
        "\n",
        "@torch.no_grad()\n",
        "\n",
        "def estimate_loss():\n",
        "\n",
        "    out = {}\n",
        "    model.eval()\n",
        "    for split in ['train','val']:\n",
        "      losses = torch.zeros(eval_iters)\n",
        "      for k in range(eval_iters):\n",
        "          X,Y = get_batch(split)\n",
        "          logits, loss = model(X, Y)\n",
        "          losses[k] = loss.item()\n",
        "      out[split] = losses.mean()\n",
        "    model.train()\n",
        "    return out\n",
        "\n",
        "class Head(nn.Module):\n",
        "  \"\"\"one head of self-attention\"\"\"\n",
        "\n",
        "  def __init__(self, head_size):\n",
        "    super().__init__()\n",
        "    self.key = nn.Linear(n_embd, head_size, bias=False) #(B,T,16)\n",
        "    self.query =  nn.Linear(n_embd, head_size, bias=False) #(B,T,16)\n",
        "    self.value = nn.Linear(n_embd, head_size, bias=False)\n",
        "    self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n",
        "\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "  def forward(self, x):\n",
        "    B,T,C = x.shape\n",
        "    k = self.key(x) #(B,T,C)\n",
        "    q = self.query(x) #(B,T,C)\n",
        "\n",
        "    #compute attention scores(\"affinities\")\n",
        "    wei = q @ k.transpose(-2,-1) * C**-0.5 #(B,T,16) @ (B, 16, T) -> (B,T,T)\n",
        "    wei = wei.masked_fill(self.tril[:T,:T]==0, float('-inf')) #(B,T,T)\n",
        "    wei = F.softmax(wei, dim=-1) #(B,T,T)\n",
        "    wei = self.dropout(wei)\n",
        "\n",
        "    #perform weighted aggregation of the values\n",
        "\n",
        "    v = self.value(x)\n",
        "    out = wei @ v #(B,T,T) @ (B,T,C) --> (B,T,C)\n",
        "    return out\n",
        "\n",
        "class MultiHeadAttention(nn.Module):\n",
        "  \"\"\"multiple heads of self-attention in parallel\"\"\"\n",
        "\n",
        "  def __init__(self, num_heads, head_size):\n",
        "    super().__init__()\n",
        "    self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n",
        "    self.proj = nn.Linear(n_embd, n_embd)\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "  def forward(self, x):\n",
        "    out = torch.cat([h(x) for h in self.heads], dim=-1)\n",
        "    out = self.dropout(self.proj(out))\n",
        "    return out\n",
        "\n",
        "\n",
        "class FeedForward(nn.Module):\n",
        "  \"\"\"a simple linear layer followed by a non-linearity\"\"\"\n",
        "\n",
        "  def __init__(self, n_embd):\n",
        "    super().__init__()\n",
        "    self.net = nn.Sequential(\n",
        "        nn.Linear(n_embd, 4 * n_embd),\n",
        "        nn.ReLU(),\n",
        "        nn.Linear(4 * n_embd, n_embd),\n",
        "        nn.Dropout(dropout),\n",
        "    )\n",
        "\n",
        "  def forward(self, x):\n",
        "    return self.net(x)\n",
        "\n",
        "class Block(nn.Module):\n",
        "  \"\"\"Transformer block: communication followed by computation\"\"\"\n",
        "\n",
        "  def __init__(self, n_embd, n_head):\n",
        "    #n_embd: embedding dimension, n_head: the number of heads we'd like\n",
        "    super().__init__()\n",
        "    head_size = n_embd//n_head\n",
        "    self.sa = MultiHeadAttention(n_head, head_size)\n",
        "    self.ffwd = FeedForward(n_embd)\n",
        "    self.ln1 = nn.LayerNorm(n_embd)\n",
        "    self.ln2 = nn.LayerNorm(n_embd)\n",
        "\n",
        "  def forward(self, x):\n",
        "    x = x + self.sa(self.ln1(x))\n",
        "    x = x + self.ffwd(self.ln2(x))\n",
        "    return x\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#super simple bigram model\n",
        "\n",
        "class BigramLanguageModel(nn.Module):\n",
        "\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "# each token directly reads off the logits for the next token from a lookup table\n",
        "    self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n",
        "    self.positional_embedding_table = nn.Embedding(block_size, n_embd)\n",
        "    # self.blocks = nn.Sequential(\n",
        "    #     Block(n_embd, n_head=4),\n",
        "    #     Block(n_embd, n_head=4),\n",
        "    #     Block(n_embd, n_head=4), )\n",
        "    self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])\n",
        "    self.ln_f = nn.LayerNorm(n_embd) #final layer norm\n",
        "    self.lm_head = nn.Linear(n_embd, vocab_size)\n",
        "\n",
        "  def forward(self, idx, targets=None):\n",
        "    B, T = idx.shape\n",
        "\n",
        "# idx and targets are both (B, T) tensor of integers\n",
        "    tok_emb = self.token_embedding_table(idx) #(B,T,C)\n",
        "    pos_emb = self.positional_embedding_table(torch.arange(T, device=device)) #(T,C)\n",
        "    x = tok_emb + pos_emb #(B,T,C)\n",
        "    x = self.blocks(x) #(B,T,C)\n",
        "    x = self.ln_f(x) #(B,T,C)\n",
        "    logits = self.lm_head(x) #(B,T,vocab_size)\n",
        "\n",
        "    if targets is None:\n",
        "      loss = None\n",
        "    else:\n",
        "\n",
        "      B, T, C = logits.shape\n",
        "      logits = logits.view(B*T, C)\n",
        "      targets = targets.view(B*T)\n",
        "\n",
        "      loss = F.cross_entropy(logits, targets)\n",
        "\n",
        "    return logits, loss\n",
        "\n",
        "  def generate(self, idx, max_new_tokens):\n",
        "    # idx is (B, T) array of indices in the current context\n",
        "    for _ in range(max_new_tokens):\n",
        "\n",
        "      #crop idx to the last block_size tokens\n",
        "      idx_crop = idx[:,-block_size:]\n",
        "      #get the predicitions\n",
        "      logits , loss = self(idx_crop)\n",
        "      #focus only on the last time step\n",
        "      logits = logits[:, -1, :] # becomes (B, T)\n",
        "      #apply a softmax to get probabilities\n",
        "      probs = F.softmax(logits, dim=-1) #(B, C)\n",
        "      #sample from the distribution\n",
        "      idx_next = torch.multinomial(probs, num_samples=1) #(B, 1)\n",
        "      #append sampled index to the running sequence\n",
        "      idx = torch.cat((idx, idx_next), dim=1) #(B, T+1)\n",
        "    return idx\n",
        "\n",
        "\n",
        "model = BigramLanguageModel()\n",
        "m = model.to(device)\n",
        "\n",
        "# create optimizer\n",
        "optimizer = torch.optim.AdamW(m.parameters(), lr=learning_rate)\n",
        "\n",
        "for iter in range(max_iters):\n",
        "  # every once in a while evaluate the loss on train and val sets\n",
        "\n",
        "  if iter % eval_interval ==0:\n",
        "\n",
        "    losses = estimate_loss()\n",
        "    print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n",
        "\n",
        "    #sample a batch of data\n",
        "  xb, yb = get_batch('train')\n",
        "\n",
        "  # evaluate the loss\n",
        "  logits, loss = m(xb, yb)\n",
        "  optimizer.zero_grad(set_to_none=True)\n",
        "  loss.backward()\n",
        "  optimizer.step()\n",
        "  # break\n",
        "    #generate from the model\n",
        "context = torch.zeros((1,1), dtype=torch.long, device=device)\n",
        "print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WBUAmHXU1dgY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model_weights_path = \"trained_model_weights.pth\"\n",
        "# torch.save(model.state_dict(), model_weights_path)"
      ],
      "metadata": {
        "id": "2ycWTH6iJ27U"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model_output = decode(m.generate(context, max_new_tokens=10000)[0].tolist())\n",
        "# # Define the output file path\n",
        "# output_file_path = \"shakespear_model_output.txt\"\n",
        "\n",
        "# # Write the output to the file\n",
        "# with open(output_file_path, \"w\") as output_file:\n",
        "#     output_file.write(model_output)\n",
        "\n",
        "# print(\"Model output written to\", output_file_path)"
      ],
      "metadata": {
        "id": "ETO3nsM8K7kz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# !git clone https://github.com/vinaytukka/Files_Repo.git\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dsr5tFwZTdVi",
        "outputId": "4428132f-9010-40b7-dcee-60a1132d80d7"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'Files_Repo' already exists and is not an empty directory.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5YQqY6oW61Ge"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}